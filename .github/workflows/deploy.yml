name: Deploy to VPS (staging blue-green auto)

on:
  push:
    branches:
      - staging
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build Docker image for testing & test
        run: |
          docker build -f Dockerfile.local -t next-app:test .
          docker run --rm next-app:test npm test

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      # =============================
      # 現在の環境確認 or 初回構築判定
      # =============================
      - name: Determine target color (blue or green)
        id: color
        run: |
          ACTIVE=$(ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.VPS_HOST }} "docker ps --format '{{.Names}}' | grep web-blue || true")
          BLUE_DIR=$(ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.VPS_HOST }} "test -d /home/ubuntu/staging-app-blue && echo 1 || echo 0")
          GREEN_DIR=$(ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.VPS_HOST }} "test -d /home/ubuntu/staging-app-green && echo 1 || echo 0")

          if [ "$BLUE_DIR" = "0" ] && [ "$GREEN_DIR" = "0" ]; then
            echo "初回デプロイ: blueを構築します"
            echo "color=blue" >> $GITHUB_OUTPUT
          elif [ -z "$ACTIVE" ]; then
            echo "現在blueが停止中なので、次はblueへデプロイ"
            echo "color=blue" >> $GITHUB_OUTPUT
          else
            echo "現在blueが稼働中なので、次はgreenへデプロイ"
            echo "color=green" >> $GITHUB_OUTPUT
          fi

          echo "Deploy color: ${{ steps.color.outputs.color }}"

      # =============================
      # ファイル同期
      # =============================
      - name: Sync files to target environment
        run: |
          rsync -avz \
            --exclude node_modules \
            --exclude .git \
            --exclude .next \
            --exclude .vscode \
            --exclude "*.log" \
            ./ ubuntu@${{ secrets.VPS_HOST }}:/home/ubuntu/staging-app-${{ steps.color.outputs.color }}/
        env:
          RSYNC_RSH: "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no"

      # =============================
      # デプロイ処理
      # =============================
      - name: Deploy Docker Compose on target color
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ubuntu
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -eux
            COLOR=${{ steps.color.outputs.color }}
            APP_DIR=/home/ubuntu/staging-app-$COLOR

            mkdir -p $APP_DIR
            cd $APP_DIR

            echo "===== 環境変数ファイル作成 ====="
            cat > .env.staging <<EOF
            DEPLOY_COLOR=$COLOR
            NEXT_PUBLIC_WORDPRESS_API_URL=${{ secrets.STAGING_WP_URL }}
            NEXT_PUBLIC_ENV=staging
            SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}
            STAGING_AUTH_USER=${{ secrets.STAGING_AUTH_USER }}
            STAGING_AUTH_PASSWORD=${{ secrets.STAGING_AUTH_PASSWORD }}
            NEXT_PUBLIC_TECH_CAT_ID=${{ secrets.STAGING_TECH_CAT_ID }}
            NEXT_PUBLIC_ONODY_CAT_ID=${{ secrets.STAGING_ONODY_CAT_ID }}
            EOF

            echo "===== Docker Compose起動 ====="
            DEPLOY_COLOR=$COLOR \
            docker compose --env-file .env.staging -f docker-compose.staging.yml up -d --build web wordpress db

            echo "===== 稼働確認 ====="
            sleep 10
            docker ps

      # =============================
      # https-portal初回 or 切替処理
      # =============================
      - name: Setup or switch https-portal (production-safe)
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ubuntu
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -eux
            COLOR=${{ steps.color.outputs.color }}
            APP_DIR=/home/ubuntu/staging-app-$COLOR

            echo "===== https-portal 設定・切替 ====="

            # 初回起動 or 設定切替（certsは保持）
            if ! docker ps -a --format '{{.Names}}' | grep -q 'https-portal'; then
              echo "初回起動: https-portal を立ち上げます"
              DEPLOY_COLOR=$COLOR STAGE=staging \
              docker compose -f $APP_DIR/docker-compose.staging.yml \
                --env-file $APP_DIR/.env.staging up -d https-portal
            else
              echo "既存証明書を保持しつつ切替"
              docker exec -i https-portal sed -i "s/web-blue/web-${COLOR}/g" /var/lib/https-portal/nginx/domains.conf || true
              docker exec -i https-portal sed -i "s/wordpress-blue/wordpress-${COLOR}/g" /var/lib/https-portal/nginx/domains.conf || true
              docker restart https-portal
            fi

      # =============================
      # 古い環境を停止（存在する場合のみ）
      # =============================
      - name: Cleanup old environment
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ubuntu
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -eux
            OLD_COLOR=$( [ "${{ steps.color.outputs.color }}" = "blue" ] && echo "green" || echo "blue" )
            if [ -d "/home/ubuntu/staging-app-$OLD_COLOR" ]; then
              echo "===== 古い環境 ($OLD_COLOR) を停止 ====="
              docker compose -f /home/ubuntu/staging-app-$OLD_COLOR/docker-compose.staging.yml --env-file /home/ubuntu/staging-app-$OLD_COLOR/.env.staging down || true
            else
              echo "旧環境なし: skip"
            fi

            echo "===== デプロイ完了 ====="
