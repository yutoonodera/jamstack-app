name: Deploy to VPS (staging)

on:
  push:
    branches:
      - staging
  workflow_dispatch:  # 手動実行も可能に

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # リポジトリをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v3

      # SSH 用のセットアップ
      - name: Setup SSH key
       run: |
        mkdir -p $HOME/.ssh
        echo "${{ secrets.VPS_SSH_KEY }}" > $HOME/.ssh/id_rsa
        chmod 600 $HOME/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> $HOME/.ssh/known_hosts

      # rsync で VPS にファイル同期（中身だけ）
      - name: Sync files to VPS
        run: |
          rsync -avz \
            --exclude node_modules \
            --exclude .git \
            --exclude .next \
            --exclude .vscode \
            --exclude "*.log" \
            ./ ubuntu@${{ secrets.VPS_HOST }}:/home/ubuntu/staging-app/
        env:
          RSYNC_RSH: "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no"

      # VPS に SSH して Docker Compose 再起動
      - name: Deploy Docker Compose
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ubuntu
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -eux
            echo "===== ディレクトリ確認 ====="
            mkdir -p /home/ubuntu/staging-app
            ls -ld /home/ubuntu/staging-app

            cat > /home/ubuntu/staging-app/.env.staging <<EOF
            NEXT_PUBLIC_WORDPRESS_API_URL=${{ secrets.STAGING_WP_URL }}
            EOF

            echo "===== Docker Compose 再起動 ====="
            cd /home/ubuntu/staging-app

            # イメージを最新化
            docker compose -f docker-compose.staging.yml pull

            # コンテナをバックグラウンドで起動
            docker compose --env-file .env.staging -f docker-compose.staging.yml up -d --build

            echo "===== デプロイ完了 ====="

