name: Deploy to VPS (staging fast-deploy)

on:
  push:
    branches:
      - staging
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # =============================
      # 1. リポジトリ取得
      # =============================
      - name: Checkout repository
        uses: actions/checkout@v3

      # =============================
      # 2. Next.jsをGitHub上でビルド
      # =============================
      - name: Build Next.js app
        run: |
          npm ci
          npm run build
          tar czf next-build.tar.gz .next public package*.json

      # =============================
      # 3. SSH設定
      # =============================
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts || true

      # =============================
      # 4. 成果物＋設定ファイルをrsync
      # =============================
      - name: Sync build artifacts to VPS
        run: |
          rsync -avz --delete \
            --exclude .git \
            --exclude .vscode \
            --exclude "*.log" \
            ./ ubuntu@${{ secrets.VPS_HOST }}:/home/ubuntu/staging-app/

          rsync -avz next-build.tar.gz ubuntu@${{ secrets.VPS_HOST }}:/home/ubuntu/staging-app/
        env:
          RSYNC_RSH: "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no"

      # =============================
      # 5. VPS側でデプロイ
      # =============================
      - name: Deploy Docker Compose on VPS
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ubuntu
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -eux
            cd /home/ubuntu/staging-app

            echo "===== ビルド成果物を展開 ====="
            tar xzf next-build.tar.gz || true

            echo "===== .env.staging を生成 ====="
            cat > .env.staging <<EOF
            NEXT_PUBLIC_WORDPRESS_API_URL=${{ secrets.STAGING_WP_URL }}
            NEXT_PUBLIC_ENV=staging
            SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}
            STAGING_AUTH_USER=${{ secrets.STAGING_AUTH_USER }}
            STAGING_AUTH_PASSWORD=${{ secrets.STAGING_AUTH_PASSWORD }}
            NEXT_PUBLIC_TECH_CAT_ID=${{ secrets.STAGING_TECH_CAT_ID }}
            NEXT_PUBLIC_ONODY_CAT_ID=${{ secrets.STAGING_ONODY_CAT_ID }}
            EOF

            echo "===== Dockerコンテナを再起動 ====="
            docker compose --env-file .env.staging -f docker-compose.staging.yml up -d web wordpress https-portal

            echo "===== 稼働中コンテナ確認 ====="
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

            echo "===== デプロイ完了 ====="
